#version 460 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D output_tex;


layout(location = 0) uniform vec2 resolution;
layout(location = 1) uniform vec3 cam_pos;
layout(location = 2) uniform mat3 rotation;
layout(location = 3) uniform sampler3D voxels;


#define TSQRT2 2.828427
#define SQRT2 1.414213
#define ISQRT2 0.707106

const float VOXEL_SIZE = 1./(1<<6);


bool isInsideCube(const vec3 p, float e) { return abs(p.x) < 1 + e && abs(p.y) < 1 + e && abs(p.z) < 1 + e; }


vec4 get_diffuse(vec3 ro, vec3 rd, float spread) {
	vec4 acc = vec4(0);
	float dist = 0.1953125;

	while(dist < SQRT2 && acc.a < 1){
		vec3 c = ro + rd * dist;
		//if (!isInsideCube(p,0)) break;
		c = c * 0.5 + 0.5;
		float l = 1 + spread * dist / VOXEL_SIZE;
		float level = log2(l);
		float ll = (level + 1) * (level + 1);
		vec4 voxel = textureLod(voxels, c, level);
		acc += 0.075 * ll * voxel * pow(1 - voxel.a, 2);
		dist += ll * VOXEL_SIZE * 2;
	}

	return pow(acc * 2.0, vec4(1.5));
}


vec4 get_specular(vec3 ro, vec3 rd, inout float dist) {
	vec4 acc = vec4(0);

	while (dist < 1.) {
		vec3 p = ro + rd * dist;
		//if (!isInsideCube(p,0)) break;
		p = p * 0.5 + 0.5;
		float level = 0.1 * log2(1 + dist / VOXEL_SIZE);
		vec4 v = textureLod(voxels, p, level);
		float f = 1. - acc.a;
		acc.rgb += 0.25 * v.rgb * v.a * f * (1. - dist);
		acc.a += 0.25 * v.a * f;
		dist += VOXEL_SIZE * (1.0f + 0.125f * level);
	}

	return acc;
}


vec4 get_shadow(vec3 ro, vec3 rd, float shadow_dist) {
	float acc = 0;

	float dist = 3 * VOXEL_SIZE;

	const float STOP = shadow_dist - 16 * VOXEL_SIZE;

	while(dist < STOP && acc < 1){
		vec3 p = ro + rd * dist;
		//if(!isInsideCube(p, 0)) break;
		p = p * 0.5 + 0.5;
		float l = pow(dist, 2);
		float s1 = 0.062 * textureLod(voxels, p, 1 + 0.75 * l).a;
		float s2 = 0.135 * textureLod(voxels, p, 4.5 * l).a;
		float s = s1 + s2;
		acc += (1 - acc) * s;
		dist += 0.9 * VOXEL_SIZE * (1 + 0.05 * l);
	}
	return vec4(1) - pow(smoothstep(0, 1, acc * 1.4), 1.0 / 1.4);
}


void main() {
	ivec2 pos = ivec2(gl_GlobalInvocationID.xy);

	vec2 uv = gl_GlobalInvocationID.xy / resolution * 2 - 1;

	vec3 rd = normalize(vec3(uv,1)) * rotation;
	vec3 ro = cam_pos;

	vec3 light_dir = normalize(vec3(0,-1,0));

	vec4 color = vec4(0);
	float dist = 0;

	vec4 diffuse = get_diffuse(ro,rd, 0.325);
	vec4 specular = get_specular(ro,rd, dist);


	color = specular + diffuse * 0.5;

	imageStore(output_tex, pos, color);
}
