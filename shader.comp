#version 460

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D output_tex;


layout(location = 0) uniform vec2 resolution;
layout(location = 1) uniform vec3 cam_pos;
layout(location = 2) uniform mat3 rotation;
layout(location = 3) uniform int tree_size;
layout(location = 4) uniform int tree[1000];

uint fst = 0;


#define get_tree_data(fst) ((uint(tree[(fst)/4]) >> ((fst & 3) * 8)) & 0xff)


bool ray_box(vec3 ro, vec3 rd, float size, out float t) {
	float idx = 1. / rd.x;
	float idy = 1. / rd.y;
	float idz = 1. / rd.z;

	float t1 = (-size - ro.x) * idx;
	float t2 = ( size - ro.x) * idx;
	float t3 = (-size - ro.y) * idy;
	float t4 = ( size - ro.y) * idy;
	float t5 = (-size - ro.z) * idz;
	float t6 = ( size - ro.z) * idz;

	float tmin = max(max(min(t1,t2), min(t3,t4)), min(t5,t6));
	float tmax = min(min(max(t1,t2), max(t3,t4)), max(t5,t6));

	t = tmin;

	return tmax > 0 && tmin < tmax;
}


vec4 ray_node4(vec3 ro, vec3 rd, int level, out float t, bool skip) {
	float size = 1 << level;

	uint childs = get_tree_data(fst);
	fst += 1;

	if (childs == 0)
		fst += 3;

	if (!ray_box(ro,rd, size, t))
		skip = true;

	if (skip == false && (level == 0 || childs == 0)) {
		if (childs != 0)
			skip = true;
		else
			return vec4(
					float(get_tree_data(fst-3))/255.,
					float(get_tree_data(fst-2))/255.,
					float(get_tree_data(fst-1))/255.,
					1);
	}

	return vec4(-1);
}


#define ray_node(n,p) \
vec4 ray_node##n(vec3 ro, vec3 rd, int level, out float t, bool skip) { \
	float size = 1 << level; \
\
	uint childs = get_tree_data(fst); \
	fst += 1; \
\
	if (childs == 0) \
		fst += 3; \
\
	if (skip) { \
		if (childs == 0) \
			return vec4(-1); \
		for (int i = 0; i < 8; i++) { \
			float nt; \
			if ((childs & (1 << i)) != 0) \
				ray_node##p(ro,rd,level-1,nt, true); \
		} \
		return vec4(-1); \
	} \
\
	if (!ray_box(ro,rd, size, t)) \
		skip = true; \
\
	if (skip == false && (level == 0 || childs == 0)) { \
		if (childs != 0) \
			skip = true; \
		else \
			return vec4( \
					float(get_tree_data(fst-3))/255., \
					float(get_tree_data(fst-2))/255., \
					float(get_tree_data(fst-1))/255., \
					1); \
	} \
\
	if (skip) { \
		if (childs == 0) \
			return vec4(-1); \
		for (int i = 0; i < 8; i++) { \
			float nt; \
			if ((childs & (1 << i)) != 0) \
				ray_node##p(ro,rd,level-1,nt, true); \
		} \
		return vec4(-1); \
	} \
\
	vec4 result = vec4(-1); \
	float tmin = 1000; \
\
	for (int i = 0; i < 8; i++) { \
		if ((childs & (1 << i)) == 0) \
			continue; \
\
		float nt; \
\
		float x = (float((i & 1) >> 0) - 0.5) * size; \
		float y = (float((i & 2) >> 1) - 0.5) * size; \
		float z = (float((i & 4) >> 2) - 0.5) * size; \
\
		vec4 v = ray_node##p(ro+vec3(x,y,z), rd, level - 1, nt, false); \
\
		if (v.w != -1 && nt < tmin) { \
			tmin = nt; \
			result = v; \
		} \
	} \
\
	t = tmin; \
	return result; \
}


/*ray_node(7,8)
ray_node(6,7)
ray_node(5,6)
ray_node(4,5)*/
ray_node(3,4)
ray_node(2,3)
ray_node(1,2)


vec4 render(vec3 ro, vec3 rd) {
	float t;

	vec4 color = ray_node1(ro,rd, 4, t, false);

	if (color.w == -1)
		return vec4(0);

	return color;
}


void main() {
	ivec2 pos = ivec2(gl_GlobalInvocationID.xy);

	vec2 uv = gl_GlobalInvocationID.xy / resolution * 2 - 1;
	//uv.x *= resolution.x / resolution.y;

	vec3 rd = normalize(vec3(uv,1)) * rotation;

	/*vec4 color = vec4(0);
	if (get_tree_data(28) == 0)
		color = vec4(1,1,1,1);*/

	vec4 color = render(cam_pos,rd);


	imageStore(output_tex, pos, color);
}
